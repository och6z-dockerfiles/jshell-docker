ARG IMAGE
ARG IMAGE_VERSION

FROM ${IMAGE}:${IMAGE_VERSION} AS build

RUN ["jlink", "--compress=2", \
     "--module-path", "/opt/java/openjdk/jmods", \
     "--add-modules", "jdk.jshell", \
     "--output", "/customjre"]

FROM alpine:latest

ADD https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub /etc/apk/keys/sgerrand.rsa.pub
ARG GLIBC_VER
ARG ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
ADD ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk /tmp/${GLIBC_VER}.apk

ARG GCC_LIBS_VER
ARG GCC_LIBS_URL="https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-${GCC_LIBS_VER}-x86_64.pkg.tar.xz"
ADD ${GCC_LIBS_URL} /tmp/gcc-libs.tar.xz

ARG ZLIB_VER
ARG ZLIB_URL="https://archive.archlinux.org/packages/z/zlib/zlib-${ZLIB_VER}-x86_64.pkg.tar.xz"
ADD ${ZLIB_URL} /tmp/libz.tar.xz

RUN apk --update add --no-cache \
    ca-certificates \
    binutils xz \
    && apk add /tmp/${GLIBC_VER}.apk \
    && mkdir /tmp/gcc \
    && tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc \
    && mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \
    && strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \
    && mkdir /tmp/libz \
    && tar -xf /tmp/libz.tar.xz -C /tmp/libz \
    && mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \
    && apk del binutils \
    && rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*

COPY --from=build /customjre /opt/jdk/
COPY --from=build /opt/java/openjdk/bin/jshell /opt/jdk/bin/

ENTRYPOINT ["/bin/sh", "-c"]

CMD ["/opt/jdk/bin/jshell"]

#docker build --no-cache --build-arg IMAGE=adoptopenjdk/openjdk11 --build-arg IMAGE_VERSION=alpine-slim --build-arg GLIBC_VER=2.32-r0 --build-arg GCC_LIBS_VER=9.2.0-4 --build-arg ZLIB_VER=1:1.2.11-4 --file Dockerfile.alpine --tag image-name:version .
#xhost +local:docker
#docker run --interactive --tty --volume /tmp/.X11-unix:/tmp/.X11-unix --env DISPLAY=unix$DISPLAY --name container-name image-name:version
